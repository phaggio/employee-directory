{"version":3,"sources":["components/Navbar/index.js","utils/API.js","components/Container/index.js","components/Row/index.js","components/Col/index.js","components/QuickSearch/index.js","components/TableHeader/index.js","components/TableBody/index.js","components/EmployeeTable/index.js","components/DateInput/index.js","components/DropDownButton/index.js","components/DropDownGroup/index.js","utils/headerNames.js","utils/sortBys.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","getURL","axios","get","Container","props","fluid","Row","Col","size","split","map","join","QuickSearch","label","name","onChange","handleInputChange","type","placeholder","TableHeader","headerNames","headerName","scope","key","TableBody","employees","employee","id","alt","src","image","firstname","lastname","phone","email","Date","dob","toLocaleDateString","age","EmployeeTable","DateInput","DropDownButton","sortBys","sortBy","active","data-key","value","onClick","DropDownGroup","data-toggle","aria-haspopup","aria-expanded","selectedSortByName","aria-labelledby","updateSortBy","Home","state","display","search","beginDate","undefined","endDate","sortByArr","selectedSortBy","event","targetName","target","setState","filteredEmployees","trim","toLowerCase","matchedEmployee","employeeDob","begin","end","includes","filter","selectedSortByKey","dataset","sortEmployees","sortedDisplay","sort","compare","a","b","getEmployees","API","then","res","revisedRes","data","results","obj","item","picture","medium","first","last","date","push","catch","err","console","log","this","React","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.73e72170.chunk.js","sourcesContent":["import React from 'react';\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <span className=\"navbar-brand mx-auto h1\">Employee Directory</span>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import axios from 'axios';\n\nconst baseURL = `https://randomuser.me/api/`;\nconst nationality = `us`;\nconst numberEmployees = 30;\nconst getURL = `${baseURL}?nat=${nationality}&results=${numberEmployees}`;\n\nexport default {\n  getEmployees() {\n\n    return axios.get(getURL);\n  },\n};\n","import React from 'react';\n\nfunction Container(props) {\n  // {console.log(props)}\n  return (\n    <div className={\n      `container${props.fluid ? '-fluid' : ''} my-2`\n    } {...props} />\n  );\n}\n\nexport default Container;\n","import React from 'react';\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? '-fluid' : ''} my-2`} {...props} />;\n}\n\nexport default Row;\n","import React from 'react';\n\nfunction Col(props) {\n  const size = props.size\n    .split(' ')\n    .map(size => 'col-' + size)\n    .join(' ');\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from 'react';\n\nfunction QuickSearch(props) {\n  return (\n\n    <form>\n      <div className=\"form-group row\">\n        <label className=\"col-form-label col-sm-3\">{props.label}</label>\n        <div className=\"col-sm-9 d-flex align-items-center\">\n          <input\n            name={props.name}\n            onChange={props.handleInputChange}\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"enter employee name here\"\n          />\n        </div>\n      </div>\n    </form>\n\n  )\n\n}\n\nexport default QuickSearch;\n","import React from 'react';\n\nfunction TableHeader(props) {\n\n  return (\n    <thead>\n      <tr>\n        {props.headerNames.map(headerName => (\n          <th scope=\"col\" key={headerName}>\n            <div className=\"d-flex justify-content-between align-item-center\">\n              {headerName}\n              {/* <i className=\"fa fa-fw fa-sort my-auto\"></i> */}\n            </div>\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n\nexport default TableHeader;","import React from 'react';\n\nfunction TableBody(props) {\n  return (\n    <tbody>\n      {props.employees.map(employee => (\n        <tr key={employee.id}>\n          <td>{employee.id}</td>\n          <td><img alt={`img`} src={employee.image}></img></td>\n          <td>{employee.firstname} {employee.lastname}</td>\n          <td>{employee.phone}</td>\n          <td>{employee.email}</td>\n          <td>{new Date(employee.dob).toLocaleDateString()}</td>\n          <td>{employee.age}</td>\n        </tr>\n      ))}\n    </tbody>\n  )\n}\n\nexport default TableBody;","import React from 'react';\nimport TableHeader from '../TableHeader';\nimport TableBody from '../TableBody';\n\nfunction EmployeeTable(props) {\n  return (\n    <table className=\"table table-striped table-bordered sortable\">\n      <TableHeader headerNames={props.headerNames} />\n      <TableBody employees={props.employees} />\n    </table>\n  );\n}\n\nexport default EmployeeTable;","import React from 'react';\n\nfunction DateInput(props) {\n  return (\n    <div className=\"mx-auto\">\n    <label className=\"mr-2\">{props.label}</label>\n    <input\n      type=\"date\"\n      name={props.name}\n      onChange={props.handleInputChange}\n    />\n    </div>\n  );\n}\n\nexport default DateInput;","import React from 'react';\n\nfunction DropDownButton(props) {\n  return (\n    <>\n      {\n        props.sortBys.map(sortBy => (\n          <button className={\"dropdown-item \" + sortBy.active}\n            key={sortBy.key}\n            data-key={sortBy.key}\n            value={sortBy.name}\n            onClick={props.onClick}>\n            {sortBy.name}\n          </button>\n        ))\n      }\n    </>\n  )\n};\n\nexport default DropDownButton;","import React from 'react';\nimport DropDownButton from '../DropDownButton';\n\nfunction DropDownGroup(props) {\n  return (\n    <div className=\"dropdown\">\n      <button className=\"btn btn-info dropdown-toggle\"\n        type=\"button\" id=\"dropdownMenuButton\"\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        Sort by:  {props.selectedSortByName}\n      </button>\n      <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        {\n          <DropDownButton sortBys={props.sortBys} onClick={props.updateSortBy}/>\n        }\n      </div>\n    </div>\n  )\n};\n\nexport default DropDownGroup;","export const headerNames = [\n  `ID`,\n  `Image`,\n  `Name`,\n  `Phone`,\n  `Email`,\n  `DOB`,\n  `Age`\n];\n","export const sortBys = [\n  {\n    name: `First Name`,\n    key: `firstname`,\n    active: ``\n  },\n  {\n    name: `Last Name`,\n    key: `lastname`,\n    active: ``\n  },\n  {\n    name: `DOB`,\n    key: `dob`,\n    active: ``\n  },\n  {\n    name: `Age`,\n    key: `age`,\n    active: ``\n  }\n];\n","// import PropTypes from 'prop-types';\nimport React from 'react';\nimport API from '../utils/API';\nimport Container from '../components/Container';\nimport Row from '../components/Row';\nimport Col from '../components/Col';\nimport QuickSearch from '../components/QuickSearch';\nimport EmployeeTable from '../components/EmployeeTable';\nimport DateInput from '../components/DateInput'\nimport DropDownGroup from '../components/DropDownGroup'\n\nimport { headerNames } from '../utils/headerNames';\nimport { sortBys } from '../utils/sortBys'\n\nclass Home extends React.Component {\n\n  state = {\n    employees: [],\n    display: [],\n    search: ``,\n    beginDate: undefined,\n    endDate: undefined,\n    sortByArr: sortBys,\n    selectedSortBy: { name: ``, key: `` }\n  }\n\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  handleInputChange = event => {\n    const targetName = event.target.name;\n    if (targetName === `beginDate`) {\n      const value = event.target.value ? event.target.value : `0001-01-01`;\n      this.setState({ ...this.state, beginDate: value }, this.filteredEmployees)\n    } else if (targetName === `endDate`) {\n      const value = event.target.value ? event.target.value : `2999-12-31`;\n      this.setState({ ...this.state, endDate: value }, this.filteredEmployees)\n    } else {\n      const value = event.target.value ? event.target.value.trim() : ``;\n      this.setState({ ...this.state, search: value.trim().toLowerCase() }, this.filteredEmployees)\n    }\n  }\n\n  matchedEmployee = (employee) => {\n    const name = `${employee.firstname} ${employee.lastname}`.toLowerCase()\n    const employeeDob = new Date(employee.dob);\n    const begin = this.state.beginDate === undefined ? new Date(`1900-01-01`) : new Date(this.state.beginDate)\n    const end = this.state.endDate === undefined ? new Date(`2100-01-01`) : new Date(this.state.endDate)\n    if (name.includes(this.state.search) && employeeDob >= begin && employeeDob <= end) {\n      return employee\n    }\n  }\n\n  filteredEmployees = () => {\n    const display = this.state.employees.filter(this.matchedEmployee)\n    this.setState({ ...this.state, display: display })\n  }\n\n\n  updateSortBy = event => {\n    const selectedSortByName = event.target.value;\n    const selectedSortByKey = event.target.dataset.key\n    for (const sortBy of sortBys) {\n      if (sortBy.name === selectedSortByName) {\n        sortBy.active = `active`;\n      } else {\n        sortBy.active = ``;\n      }\n    }\n    this.setState({\n      ...this.state,\n      sortByArr: sortBys,\n      selectedSortBy: {\n        name: selectedSortByName,\n        key: selectedSortByKey\n      }\n    }, this.sortEmployees)\n  }\n\n  sortEmployees = () => {\n    const sortedDisplay = this.state.display.sort(this.compare)\n    this.setState({\n      ...this.state,\n      display: sortedDisplay\n    });\n  }\n\n  compare = (a, b) => {\n    const aItem = a[this.state.selectedSortBy.key]\n    const bItem = b[this.state.selectedSortBy.key]\n    let comparison = 0\n    if (aItem > bItem) {\n      comparison = 1;\n    } else {\n      comparison = -1;\n    }\n    return comparison;\n  }\n\n  getEmployees = () => {\n    API.getEmployees()\n      .then(res => {\n        const revisedRes = [];\n        for (const obj of res.data.results) {\n          const item = {\n            id: obj.id.value,\n            image: obj.picture.medium,\n            firstname: obj.name.first,\n            lastname: obj.name.last,\n            phone: obj.phone,\n            email: obj.email,\n            dob: obj.dob.date,\n            age: obj.dob.age\n          }\n          revisedRes.push(item);\n        }\n        this.setState({\n          employees: revisedRes,\n          display: revisedRes\n        });\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col size=\"md-12\">\n            <h1>Employee Directory</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-12\">\n            <Row>\n              <QuickSearch\n                name={`search`}\n                label={`Employee Name`}\n                handleInputChange={this.handleInputChange}\n              />\n            </Row>\n            <Row>\n              <DateInput\n                label={`Born after:`}\n                name={`beginDate`}\n                handleInputChange={this.handleInputChange}\n              />\n              <DateInput\n                label={`Born before:`}\n                name={`endDate`}\n                handleInputChange={this.handleInputChange}\n              />\n              <DropDownGroup\n                sortBys={this.state.sortByArr}\n                updateSortBy={this.updateSortBy}\n                selectedSortByName={this.state.selectedSortBy.name}\n              />\n            </Row>\n            <Row>\n              <EmployeeTable headerNames={headerNames} employees={this.state.display} />\n            </Row>\n          </Col>\n        </Row>\n\n\n      </Container>\n    );\n  }\n\n}\n\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Router>\n\n\n      <div>\n        <Navbar />\n        <Route exact path=\"/\" component={Home} />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}